# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files in version control:
#  - .idea/modules.xml
#  - .idea/*.iml
#  - .idea/misc.xml
#  - .idea/vcs.xml
.idea/

# VSCode
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# OpenEd MCP Server specific
data/cache/
data/exports/
data/logs/
data/temp/
*.db
*.sqlite
*.sqlite3
logs/
.openedu-mcp/

# Docker
.dockerignore
docker-compose.override.yml

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# IDE files
*.sublime-project
*.sublime-workspace

# Local configuration overrides
config/local.yaml
config/development.local.yaml
config/production.local.yaml

# pytest cache
.pytest_cache/

# mypy cache
.mypy_cache/

# Coverage reports
htmlcov/
.coverage
.coverage.*

# Virtual environments (additional patterns)
venv/
.venv/
env/
.env/

# Jupyter Notebook checkpoints
.ipynb_checkpoints/

# macOS specific
.DS_Store
.AppleDouble
.LSOverride

# Windows specific
Thumbs.db
ehthumbs.db
Desktop.ini

# Linux specific
*~

# Editor backups and swap files
*.bak
*.swp
*.swo
*~

# Local development files
.local/
local/

# Performance and profiling
*.prof
*.lprof

# Documentation builds
docs/_build/
docs/build/

# Package builds
build/
dist/
*.egg-info/

# Local cache directories
.cache/
cache/

# Local data directories (project specific)
data/local/
data/temp/
temp/
tmp/

# Local configuration overrides (additional)
config/*.local.yaml
config/*.local.yml
*.local.yaml
*.local.yml

# Runtime files
*.pid
*.sock

# Backup files
*.backup
*.bak
*.orig

# Archive files (temporary)
*.tar
*.tar.gz
*.zip
*.rar

# IDE and editor specific files
.vscode/settings.json
.vscode/launch.json
.vscode/tasks.json
.vscode/c_cpp_properties.json
.vscode/extensions.json
*.code-workspace

# JetBrains IDEs
.idea/
*.iml
*.iws
*.ipr

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~
.netrwhist

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Local environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# Test artifacts
test-results/
test-reports/
.tox/
.nox/

# Security and secrets
*.pem
*.key
*.crt
*.p12
secrets/
.secrets/

# Database files
*.db-journal
*.db-wal
*.db-shm

# Monitoring and metrics
metrics/
monitoring/